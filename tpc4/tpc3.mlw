
(* Considere o algoritmo quicksort em baixo. 
   A função principal está equipada com o respectivo
   contrato, e anotações ("asserts") suficientes para
   permitir a prova online no TryWhy3. 
   
   Defina a função "partition" (código e contrato) e
   prove a correcção do algoritmo. 
   
   Deverá provar com sucesso todas as condições de 
   verificação. Será necessário fazer "splitting" e 
   aumentar o número de passos de prova para um 
   valor adequado. 
 *) 


module QuickSort

  use int.Int
  use list.ListRich
  use list.SortedInt
  
  (* Lema auxiliar para correr no TryWhy3, não necessário
     se standalone
   *)     
  let rec lemma sorted_append_cons (l1 l2 :list int) (x:int)
    requires { sorted l1 }
    requires { sorted l2 }
    requires { forall y :int. mem y l1 -> y<=x }
    requires { forall z :int. mem z l2 -> x<=z }
    ensures  { sorted (l1++(Cons x l2)) }
  = match l1 with
    | Nil -> ()
    | Cons h t -> assert { forall y :int. mem y l1 <-> y=h \/ mem y t } ; 
        sorted_append_cons t l2 x
    end

(*
Em haskell
partition::Int -> [Int] -> ([Int],[Int])
partition _ [] = ([],[])
partition x (e:lt) = let (l1,l2) = partition x lt
                        in if e <= x then ([e]++l1,l2)
                        else (l1,[e] ++ l2)
*)



  let rec function partition (x: int) (l: list int):(l1: list int,l2: list int)
    ensures {forall a: int. mem a l1 -> a <= x}
    ensures {forall b: int. mem b l2 -> x <= b}
    ensures {permut l (l1++l2)}
    variant { length l }
  =
    match l with
        | Nil -> (Nil,Nil)
        | Cons e lt -> let (l1, l2) = partition x lt in
                       if e <= x then (Cons e l1, l2) else (l1, Cons e l2)
    end



  let rec function quicksort (l :list int) : list int
    ensures { sorted result } 
    ensures { permut l result }
    variant { length l }
  =
  match l with
  | Nil -> Nil
  | Cons x l -> let (l1,l2) = partition x l in
    	     	let l1' = quicksort l1 in
    	     	let l2' = quicksort l2 in
		        assert { forall y :int. mem y l1' -> y<=x } ;
		        assert { forall z :int. mem z l2' -> x<=z } ;
                l1'++(Cons x l2')
  end






  predicate is_a_sorting_algorithm (f: list int -> list int) =
    forall al :list int. permut al (f al) /\ sorted (f al)

  goal is_a_sorting_algorithm : is_a_sorting_algorithm quicksort



end